// brute force

import java.util.*;

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        int h = height(root);

        for (int level = 1; level <= h; level++) {
            List<Integer> current = new ArrayList<>();
            getLevel(root, level, current);
            result.add(current);
        }

        return result;
    }

    private int height(TreeNode root) {
        if (root == null) return 0;
        return 1 + Math.max(height(root.left), height(root.right));
    }

    // helper to collect nodes at a given level
    private void getLevel(TreeNode root, int level, List<Integer> list) {
        if (root == null) return;
        if (level == 1) {
            list.add(root.val);
        } else {
            getLevel(root.left, level - 1, list);
            getLevel(root.right, level - 1, list);
        }
    }
}



// optimal
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
         Queue <TreeNode>q=new ArrayDeque<>();
        List<List<Integer>>result=new ArrayList<>();
        if(root==null) return result;
        q.add(root);
        while(q.size()>0){
            List<Integer>removal=new ArrayList<>();
            int removals=q.size();
            for(int i=0;i<removals;i++){
              TreeNode rm=q.remove();
              removal.add(rm.val);
              if(rm.left!=null){
                q.add(rm.left);
              }
              if(rm.right!=null){
                q.add(rm.right);
              }
            }
            result.add(removal);
        }
        return result;
        
    }
}
