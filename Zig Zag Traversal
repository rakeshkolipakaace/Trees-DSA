// brute force solution

import java.util.*;

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        int h = height(root);

        // alternate order using a flag
        boolean leftToRight = true;

        for (int level = 1; level <= h; level++) {
            List<Integer> current = new ArrayList<>();
            getLevel(root, level, current, leftToRight);
            result.add(current);
            leftToRight = !leftToRight; // flip direction
        }

        return result;
    }

    // compute height of the tree
    private int height(TreeNode root) {
        if (root == null) return 0;
        return 1 + Math.max(height(root.left), height(root.right));
    }

    // collect nodes at a given level in given order
    private void getLevel(TreeNode root, int level, List<Integer> list, boolean leftToRight) {
        if (root == null) return;
        if (level == 1) {
            list.add(root.val);
        } else {
            if (leftToRight) {
                getLevel(root.left, level - 1, list, leftToRight);
                getLevel(root.right, level - 1, list, leftToRight);
            } else {
                getLevel(root.right, level - 1, list, leftToRight);
                getLevel(root.left, level - 1, list, leftToRight);
            }
        }
    }
}


// optimal

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        Stack<TreeNode >curr=new Stack<>();
        Stack<TreeNode>next=new Stack<>();
        List<List<Integer>>result=new ArrayList<>();

        if(root==null) return result;
        curr.add(root);
        int level=0;

        while(curr.size()!=0){
        List<Integer>removal=new ArrayList<>();

           while(curr.size()!=0){
             TreeNode rm=curr.pop();
            removal.add(rm.val);
            if(level%2==0){
                if(rm.left!=null){
                    next.add(rm.left);
                }
                if(rm.right!=null){
                    next.add(rm.right);
                }
            }
            else{
                if(rm.right!=null){
                    next.add(rm.right);
                }
                if(rm.left!=null){
                    next.add(rm.left);
                }
            }

       
           }
            result.add(removal);
        level++;
        curr=next;
        next=new Stack<>();

        }  
        
        return result;

    }
}